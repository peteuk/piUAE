/*
 * included by compemu.h
 */

DECLARE(bt_l_ri(RR4 r, IMM i));
DECLARE(bt_l_rr(RR4 r, RR4 b));
DECLARE(btc_l_ri(RW4 r, IMM i));
DECLARE(btc_l_rr(RW4 r, RR4 b));
DECLARE(bts_l_ri(RW4 r, IMM i));
DECLARE(bts_l_rr(RW4 r, RR4 b));
DECLARE(btr_l_ri(RW4 r, IMM i));
DECLARE(btr_l_rr(RW4 r, RR4 b));
DECLARE(mov_l_rm(W4 d, IMM s));
DECLARE(call_r(RR4 r));
DECLARE(sub_l_mi(IMM d, IMM s));
DECLARE(mov_l_mi(IMM d, IMM s));
DECLARE(mov_w_mi(IMM d, IMM s));
DECLARE(mov_b_mi(IMM d, IMM s));
DECLARE(rol_b_ri(RW1 r, IMM i));
DECLARE(rol_w_ri(RW2 r, IMM i));
DECLARE(rol_l_ri(RW4 r, IMM i));
DECLARE(rol_l_rr(RW4 d, RR1 r));
DECLARE(rol_w_rr(RW2 d, RR1 r));
DECLARE(rol_b_rr(RW1 d, RR1 r));
DECLARE(shll_l_rr(RW4 d, RR1 r));
DECLARE(shll_w_rr(RW2 d, RR1 r));
DECLARE(shll_b_rr(RW1 d, RR1 r));
DECLARE(ror_b_ri(RR1 r, IMM i));
DECLARE(ror_w_ri(RR2 r, IMM i));
DECLARE(ror_l_ri(RR4 r, IMM i));
DECLARE(ror_l_rr(RR4 d, RR1 r));
DECLARE(ror_w_rr(RR2 d, RR1 r));
DECLARE(ror_b_rr(RR1 d, RR1 r));
DECLARE(shrl_l_rr(RW4 d, RR1 r));
DECLARE(shrl_w_rr(RW2 d, RR1 r));
DECLARE(shrl_b_rr(RW1 d, RR1 r));
DECLARE(shra_l_rr(RW4 d, RR1 r));
DECLARE(shra_w_rr(RW2 d, RR1 r));
DECLARE(shra_b_rr(RW1 d, RR1 r));
DECLARE(shll_l_ri(RW4 r, IMM i));
DECLARE(shll_w_ri(RW2 r, IMM i));
DECLARE(shll_b_ri(RW1 r, IMM i));
DECLARE(shrl_l_ri(RW4 r, IMM i));
DECLARE(shrl_w_ri(RW2 r, IMM i));
DECLARE(shrl_b_ri(RW1 r, IMM i));
DECLARE(shra_l_ri(RW4 r, IMM i));
DECLARE(shra_w_ri(RW2 r, IMM i));
DECLARE(shra_b_ri(RW1 r, IMM i));
DECLARE(setcc(W1 d, IMM cc));
DECLARE(setcc_m(IMM d, IMM cc));
DECLARE(cmov_b_rr(RW1 d, RR1 s, IMM cc));
DECLARE(cmov_w_rr(RW2 d, RR2 s, IMM cc));
DECLARE(cmov_l_rr(RW4 d, RR4 s, IMM cc));
DECLARE(cmov_l_rm(RW4 d, IMM s, IMM cc));
DECLARE(bsf_l_rr(W4 d, RR4 s));
DECLARE(pop_m(IMM d));
DECLARE(push_m(IMM d));
DECLARE(pop_l(W4 d));
DECLARE(push_l_i(IMM i));
DECLARE(push_l(RR4 s));
DECLARE(clear_16(RW4 r));
DECLARE(clear_8(RW4 r));
DECLARE(sign_extend_16_rr(W4 d, RR2 s));
DECLARE(sign_extend_8_rr(W4 d, RR1 s));
DECLARE(zero_extend_16_rr(W4 d, RR2 s));
DECLARE(zero_extend_8_rr(W4 d, RR1 s));
DECLARE(imul_64_32(RW4 d, RW4 s));
DECLARE(mul_64_32(RW4 d, RW4 s));
DECLARE(imul_32_32(RW4 d, RR4 s));
DECLARE(mov_b_rr(W1 d, RR1 s));
DECLARE(mov_w_rr(W2 d, RR2 s));
DECLARE(mov_l_rrm_indexed(W4 d, RR4 baser, RR4 index));
DECLARE(mov_w_rrm_indexed(W2 d, RR4 baser, RR4 index));
DECLARE(mov_b_rrm_indexed(W1 d, RR4 baser, RR4 index));
DECLARE(mov_l_mrr_indexed(RR4 baser, RR4 index, RR4 s));
DECLARE(mov_w_mrr_indexed(RR4 baser, RR4 index, RR2 s));
DECLARE(mov_b_mrr_indexed(RR4 baser, RR4 index, RR1 s));
DECLARE(mov_l_rm_indexed(W4 d, IMM base, RR4 index));
DECLARE(mov_l_rR(W4 d, RR4 s, IMM offset));
DECLARE(mov_w_rR(W2 d, RR4 s, IMM offset));
DECLARE(mov_b_rR(W1 d, RR4 s, IMM offset));
DECLARE(mov_l_brR(W4 d, RR4 s, IMM offset));
DECLARE(mov_w_brR(W2 d, RR4 s, IMM offset));
DECLARE(mov_b_brR(W1 d, RR4 s, IMM offset));
DECLARE(mov_l_Ri(RR4 d, IMM i, IMM offset));
DECLARE(mov_w_Ri(RR4 d, IMM i, IMM offset));
DECLARE(mov_b_Ri(RR4 d, IMM i, IMM offset));
DECLARE(mov_l_Rr(RR4 d, RR4 s, IMM offset));
DECLARE(mov_w_Rr(RR4 d, RR2 s, IMM offset));
DECLARE(mov_b_Rr(RR4 d, RR1 s, IMM offset));
DECLARE(lea_l_brr(W4 d, RR4 s, IMM offset));
DECLARE(lea_l_brr_indexed(W4 d, RR4 s, RR4 index, IMM factor, IMM offset));
DECLARE(mov_l_bRr(RR4 d, RR4 s, IMM offset));
DECLARE(mov_w_bRr(RR4 d, RR2 s, IMM offset));
DECLARE(mov_b_bRr(RR4 d, RR1 s, IMM offset));
DECLARE(gen_bswap_32(RW4 r));
DECLARE(gen_bswap_16(RW2 r));
DECLARE(mov_l_rr(W4 d, RR4 s));
DECLARE(mov_l_mr(IMM d, RR4 s));
DECLARE(mov_w_mr(IMM d, RR2 s));
DECLARE(mov_w_rm(W2 d, IMM s));
DECLARE(mov_b_mr(IMM d, RR1 s));
DECLARE(mov_b_rm(W1 d, IMM s));
DECLARE(mov_l_ri(W4 d, IMM s));
DECLARE(mov_w_ri(W2 d, IMM s));
DECLARE(mov_b_ri(W1 d, IMM s));
DECLARE(add_l_mi(IMM d, IMM s) );
DECLARE(add_w_mi(IMM d, IMM s) );
DECLARE(add_b_mi(IMM d, IMM s) );
DECLARE(test_l_ri(RR4 d, IMM i));
DECLARE(test_l_rr(RR4 d, RR4 s));
DECLARE(test_w_rr(RR2 d, RR2 s));
DECLARE(test_b_rr(RR1 d, RR1 s));
DECLARE(and_l_ri(RW4 d, IMM i));
DECLARE(and_l(RW4 d, RR4 s));
DECLARE(and_w(RW2 d, RR2 s));
DECLARE(and_b(RW1 d, RR1 s));
DECLARE(or_l_ri(RW4 d, IMM i));
DECLARE(or_l(RW4 d, RR4 s));
DECLARE(or_w(RW2 d, RR2 s));
DECLARE(or_b(RW1 d, RR1 s));
DECLARE(adc_l(RW4 d, RR4 s));
DECLARE(adc_w(RW2 d, RR2 s));
DECLARE(adc_b(RW1 d, RR1 s));
DECLARE(add_l(RW4 d, RR4 s));
DECLARE(add_w(RW2 d, RR2 s));
DECLARE(add_b(RW1 d, RR1 s));
DECLARE(sub_l_ri(RW4 d, IMM i));
DECLARE(sub_w_ri(RW2 d, IMM i));
DECLARE(sub_b_ri(RW1 d, IMM i));
DECLARE(add_l_ri(RW4 d, IMM i));
DECLARE(add_w_ri(RW2 d, IMM i));
DECLARE(add_b_ri(RW1 d, IMM i));
DECLARE(sbb_l(RW4 d, RR4 s));
DECLARE(sbb_w(RW2 d, RR2 s));
DECLARE(sbb_b(RW1 d, RR1 s));
DECLARE(sub_l(RW4 d, RR4 s));
DECLARE(sub_w(RW2 d, RR2 s));
DECLARE(sub_b(RW1 d, RR1 s));
DECLARE(cmp_l(RR4 d, RR4 s));
DECLARE(cmp_l_ri(RR4 r, IMM i));
DECLARE(cmp_w(RR2 d, RR2 s));
DECLARE(cmp_b(RR1 d, RR1 s));
DECLARE(xor_l(RW4 d, RR4 s));
DECLARE(xor_w(RW2 d, RR2 s));
DECLARE(xor_b(RW1 d, RR1 s));
DECLARE(live_flags(void));
DECLARE(dont_care_flags(void));
DECLARE(duplicate_carry(void));
DECLARE(restore_carry(void));
DECLARE(start_needflags(void));
DECLARE(end_needflags(void));
DECLARE(make_flags_live(void));
DECLARE(call_r_11(RR4 r, W4 out1, RR4 in1, IMM osize, IMM isize));
DECLARE(call_r_02(RR4 r, RR4 in1, RR4 in2, IMM isize1, IMM isize2));
DECLARE(readmem_new(RR4 address, W4 dest, IMM offset, IMM size, W4 tmp));
DECLARE(writemem_new(RR4 address, RR4 source, IMM offset, IMM size, W4 tmp));
DECLARE(forget_about(W4 r));
DECLARE(nop(void));

DECLARE(f_forget_about(FW r));
DECLARE(fmov_pi(FW r));
DECLARE(fmov_log10_2(FW r));
DECLARE(fmov_log2_e(FW r));
DECLARE(fmov_loge_2(FW r));
DECLARE(fmov_1(FW r));
DECLARE(fmov_0(FW r));
DECLARE(fmov_rm(FW r, MEMR m));
DECLARE(fmov_mr(MEMW m, FR r));
DECLARE(fmovi_rm(FW r, MEMR m));
DECLARE(fmovi_mrb(MEMW m, FR r, double *bounds));
DECLARE(fmovs_rm(FW r, MEMR m));
DECLARE(fmovs_mr(MEMW m, FR r));
DECLARE(fcuts_r(FRW r));
DECLARE(fcut_r(FRW r));
DECLARE(fmov_ext_mr(MEMW m, FR r));
DECLARE(fmov_ext_rm(FW r, MEMR m));
DECLARE(fmov_rr(FW d, FR s));
DECLARE(fldcw_m_indexed(RR4 index, IMM base));
DECLARE(ftst_r(FR r));
DECLARE(dont_care_fflags(void));
DECLARE(fsqrt_rr(FW d, FR s));
DECLARE(fabs_rr(FW d, FR s));
DECLARE(frndint_rr(FW d, FR s));
DECLARE(fgetexp_rr(FW d, FR s));
DECLARE(fgetman_rr(FW d, FR s));
DECLARE(fsin_rr(FW d, FR s));
DECLARE(fcos_rr(FW d, FR s));
DECLARE(ftan_rr(FW d, FR s));
DECLARE(fsincos_rr(FW d, FW c, FR s));
DECLARE(fscale_rr(FRW d, FR s));
DECLARE(ftwotox_rr(FW d, FR s));
DECLARE(fetox_rr(FW d, FR s));
DECLARE(fetoxM1_rr(FW d, FR s));
DECLARE(ftentox_rr(FW d, FR s));
DECLARE(flog2_rr(FW d, FR s));
DECLARE(flogN_rr(FW d, FR s));
DECLARE(flogNP1_rr(FW d, FR s));
DECLARE(flog10_rr(FW d, FR s));
DECLARE(fasin_rr(FW d, FR s));
DECLARE(facos_rr(FW d, FR s));
DECLARE(fatan_rr(FW d, FR s));
DECLARE(fatanh_rr(FW d, FR s));
DECLARE(fsinh_rr(FW d, FR s));
DECLARE(fcosh_rr(FW d, FR s));
DECLARE(ftanh_rr(FW d, FR s));
DECLARE(fneg_rr(FW d, FR s));
DECLARE(fadd_rr(FRW d, FR s));
DECLARE(fsub_rr(FRW d, FR s));
DECLARE(fmul_rr(FRW d, FR s));
DECLARE(frem_rr(FRW d, FR s));
DECLARE(frem1_rr(FRW d, FR s));
DECLARE(fdiv_rr(FRW d, FR s));
DECLARE(fcmp_rr(FR d, FR s));
DECLARE(fflags_into_flags(W2 tmp));
